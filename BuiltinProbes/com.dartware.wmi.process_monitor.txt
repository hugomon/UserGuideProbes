<!-- 
Command Line WMI Probe to monitor processes (com.dartware.wmi.process_monitor) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
	19 Aug 2013 - Edited description for User Guide (via Probe Doc Generator)
  2 Sept 2013 bobm - Updated version number 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.process_monitor" 
	human_name		=	"WMI Process Monitor" 
	version			=	"1.12" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Process Monitor"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Process Monitor\p\ 

This probe uses WMI to retrieve information about processes running on the target host. Specifically, it queries the PercentProcessorTime property of the Win32_PerfFormattedData_PerfProc_Process class and compares it against the specified parameters. Any of the specified processes not found are listed, and the status is set to Critical.  The target host must be running Windows XP, Windows Server 2003 or later.

\b\Parameters\p\

\i\Process\p\ - a comma-separated list of process names to check. Extensions are not included in the process names. Names containing spaces or other special characters should be enclosed in quotes. If more than one process matches the name, all matching processes are listed.

\i\Warning\p\ and \i\Critical\p\ - specify thresholds (in percent) for which the device condition is set to the specified state.

\i\User\p\ - may be a local user on the target host, or can take the form \m\domain\\user\g\ for a domain login. If authentication is not required (such as when the target is localhost,) leave this parameter blank.

\i\Timeout (sec)\p\ - the number of seconds to wait before assuming the host is not available.

InterMapper invokes the \m\proc_mon.vbs\g\ companion script, included with the probe. It uses the script's exit value to set the condition of the device. It also uses the performance data returned by the script to create a nice display of chartable data.

</description> 

<parameters>
	Process=""
	"Warning (%)"="20"
	"Critical (%)"="10"
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} proc_mon.vbs"
	arg="-h ${address} -i ${Process} -w ${Warning (%)} -c ${Critical (%)}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:proc_mon.vbs>
'Command Line WMI Probe to monitor processes (to be used with com.dartware.wmi.process_monitor) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 


' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

On Error Resume Next

' Collect our arguments
host = ""
user = ""
pass = ""
inst = ""
warn = ""
crit = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-inst") OR (test = "-i") then
		inst = GetNextArg(i, numargs)
	end if
	if (test = "-warn") OR (test = "-w") then
		warn = GetNextArg(i, numargs)
		if (warn <> "") then warn = ccur(warn)
	end if
	if (test = "-crit") OR (test = "-c") then
		crit = GetNextArg(i, numargs)
		if (crit <> "") then crit = ccur(crit)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or warn = "" or crit = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

dim process
dim running

process = split(inst,",")
redim running(ubound(process))

' Connect with target via WMI
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & host & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (host, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

' Get process data
Set colItems = objWMIService.ExecQuery("Select * from Win32_PerfFormattedData_PerfProc_Process",,48)
CheckError("")

' Massage data
dim Name()			' colItems.Count won't work because WMI needs to enumerate the entire collection, to slow for VBscript
dim ProcessTime()	' the redim in a loop below looks ugly, but is the more effecient choice
dim ProcessID()

nP = 0
For Each objItem in colItems
	for n=0 to ubound(process)
		if (lcase(objItem.Name) = lcase(process(n))) then
			running(n) = True

			nP = nP + 1
			redim preserve Name(nP)
			redim preserve ProcessTime(nP)
			redim preserve ProcessID(nP)
		
			Name(nP) = objItem.Name
			ProcessTime(nP) = ccur(objItem.PercentProcessorTime)
			ProcessID(nP) = objItem.IDProcess
		end if
	next
Next
CheckError("")

' Evaluate criteria to set returncode
criticalreason = ""
warningreason = ""
returncode = 0
for n=1 to nP
	if (ProcessTime(n) > crit) then 
		returncode = 2
		criticalreason = criticalreason & vbNewLine & "Process Time for " & Name(n) & " is above " & crit & "%"
	elseif (ProcessTime(n) > warn) then 
		if (returncode < 2) then 
			returncode = 1
			warningreason = warningreason & vbNewLine & "Process Time for " & Name(n) & " is above " & warn & "%"
		end if
	end if
next

' Check that all processes are running
for n=0 to ubound(process)
	if (running(n) = False) and (process(n) <> "") then 
		returncode = 2
		criticalreason = criticalreason & vbNewLine & "Process " & process(n) & " is not running."
	end if
next

' Build data output
output= "\{"
for n=1 to nP
	output = output & "ProcessTime" & n & ":=" & formatnumber(ProcessTime(n),3,vbTrue,vbFalse,vbFalse) & ","
next

' Set reason based on returncode
select case returncode
	case 0:
		output = output & "reason:=""" & "All processes are running.""}"
	case 1:
		output = output & "reason:=""" & warningreason & """}"
	case 2:
		output = output & "reason:=""" & criticalreason & """}"
	case else:
		output = output & "reason:=""""}"	' make sure we always define the reason string
end select

wscript.echo output & "\B5\WMI Process Monitor\0P\"

for n=1 to nP
	wscript.echo "\B4\" & Name(n) & "(" & ProcessID(n) & ")\P0\"
	wscript.echo "    \4\Process Time:  \0\ $ProcessTime" & n & " %"
next

' Done
wscript.quit(returncode)
</tool:proc_mon.vbs>