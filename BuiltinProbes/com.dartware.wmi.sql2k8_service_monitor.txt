<!-- 
Command Line WMI Probe to monitor SQL Server 2008 processes (com.dartware.wmi.sql2k8_service_monitor) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
  2 Sept 2013 bobm - Updated version number 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.sql2k8_service_monitor" 
	human_name		=	"WMI SQL Server 2008 Service Monitor" 
	version			=	"1.5" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI SQL Server 2008 Service Monitor"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI SQL Server 2008 Service Monitor\p\ 

This probe uses WMI to retrieve the state of Microsoft SQL Server 2008 services running on the target host by querying the Win32_Service class. The states of the selected services are listed, and if any are not running, the status of the device is set to Critical. The target host must be running Windows 2000 or later.

\b\Parameters\p\

\i\Services\p\ - select or clear checkboxes to select the services which you want to monitor.

\i\Instance\p\ - the SQL Server instance you wish to monitor on the target host. To monitor the default instance, leave this parameter blank.

\i\User\p\ - may be a local user on the target host, or can take the form \m\domain\\user\g\ for a domain login. If authentication is not required (such as when the target is localhost,) leave this parameter blank.

\i\Timeout (sec)\p\ - the number of seconds to wait before assuming the host is not available.

InterMapper invokes the \m\sql2k8_serv_mon.vbs\g\ companion script, included with this probe. It uses the script's exit value to set the condition of the device.

</description> 

<parameters>
	"SQL Server Integration Services 10.0[true,false]"="false"
	"SQL Full-text Filter Daemon Launcher[true,false]"="false"
	"SQL Server[true,false]"="false"
	"SQL Active Directory Helper Service[true,false]"="false"
	"SQL Server Analysis Services[true,false]"="false"
	"SQL Server Reporting Services[true,false]"="false"
	"SQL Server Browser[true,false]"="false"
	"SQL Server Agent[true,false]"="false"
	"SQL Server VSS Writer[true,false]"="false"
	Instance=""
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} sql2k8_serv_mon.vbs"
	arg="-h ${address} -i ${Instance} -s ${SQL Server Integration Services 10.0[true,false]},${SQL Full-text Filter Daemon Launcher[true,false]},${SQL Server[true,false]},${SQL Active Directory Helper Service[true,false]},${SQL Server Analysis Services[true,false]},${SQL Server Reporting Services[true,false]},${SQL Server Browser[true,false]},${SQL Server Agent[true,false]},${SQL Server VSS Writer[true,false]}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:sql2k8_serv_mon.vbs>
'Command Line WMI Probe to monitor processes (to be used with com.dartware.wmi.sql2k8_service_monitor) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 


' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

On Error Resume Next

' Collect our arguments
host = ""
user = ""
pass = ""
inst = ""
serv = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-inst") OR (test = "-i") then
		inst = GetNextArg(i, numargs)
	end if
	if (test = "-serv") OR (test = "-s") then
		serv = GetNextArg(i, numargs)
	end if
next

if verbose then
	wscript.echo "host: " & host
	wscript.echo "serv: " & serv
end if

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or serv = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

aDesc= array( _
				"SQL Server Integration Services 10.0", _
				"SQL Full-text Filter Daemon Launcher", _
				"SQL Server", _
				"SQL Active Directory Helper Service", _
				"SQL Server Analysis Services", _
				"SQL Server Reporting Services", _
				"SQL Server Browser", _
				"SQL Server Agent", _
				"SQL Server VSS Writer")

if (inst = "") then
	aName = array( _
					"MsDtsServer100", _
					"MSSQLFDLauncher", _
					"MSSQLSERVER", _
					"MSSQLServerADHelper100", _
					"MSSQLServerOLAPService", _
					"ReportServer", _
					"SQLBrowser", _
					"SQLSERVERAGENT", _
					"SQLWriter")
else
	aName = array( _
					"MsDtsServer100", _
					"MSSQLFDLauncher$" & ucase(inst), _
					"MSSQL$" & ucase(inst), _
					"MSSQLServerADHelper100", _
					"MSOLAP$" & ucase(inst), _
					"ReportServer$" & ucase(inst), _
					"SQLBrowser", _
					"SQLAgent$" & ucase(inst), _
					"SQLWriter")
end if

dim service
dim running

service = split(serv,",")
nS = ubound(service)
redim running(nS)

' Connect with target via WMI
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & host & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (host, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

Set colItems = objWMIService.ExecQuery("Select DIsplayName, Name, State, Status from Win32_Service")
CheckError("")

' Massage data
For Each objItem in colItems
	for n=0 to nS
		if (service(n) = "true") then
			if (lcase(objItem.Name) = lcase(aName(n))) then
				running(n) = (lcase(objItem.State) = "running")
			end if
		end if
	next
Next
CheckError("")

returncode = 0
criticalreason = ""

' Check that all services are running
for n=0 to nS
	if (service(n) = "true") then
		if (running(n) = False) then 
			returncode = 2
			criticalreason = criticalreason & vbNewLine & aDesc(n) & " is not running."
		end if
	end if
next

' Build data output
output= "\{"

' Set reason based on returncode
select case returncode
	case 0:
		output = output & "reason:=""" & vbNewLine & "All services are running.""}"
	case 2:
		output = output & "reason:=""" & criticalreason & """}"
	case else:
		output = output & "reason:=""""}"	' make sure we always define the reason string
end select

if (inst = "") then
	wscript.echo output & "\B5\WMI SQL Server 2008 Service Monitor (MSSQLSERVER)\0P\"
else
	wscript.echo output & "\B5\WMI SQL Server 2008 Service Monitor (" & inst & ")\0P\"
end if

for n=0 to nS
	if (service(n) = "true") then
		if (running(n) = False) then
			wscript.echo "\1\  " & aDesc(n) &  " is not running.\0\"
		else
			wscript.echo "\4\  " & aDesc(n) &  " is running.\0\"
		end if
	end if
next

' Write it and done
wscript.quit(returncode)
</tool:sql2k8_serv_mon.vbs>
